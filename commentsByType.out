                // REQ Only consider regions for weighting that exceed the threshold limit
    // REQ: region is considered adjacent even if its touching diagonally
 * REQ Utility report method to list GridRegion properties to a stream.
    int xCoord; // REQ Work within a 2 dimensional grid
    // REQ Must weight each region based on its "mass" meaning the total of regions strength and its neighboors
    unsigned signalStrength; // REQ refers potentially to a signal strength
 * REQ Also output runtime grid dimensions, signal strength limit, region coords with the greatest mass of the subregion
 * REQ Create a subregion given a starting region.
    // REQ Each subregions members are unique to the subregion (cant exist in 2 subregions at once)
 * REQ Find all GridRegions whose threshold value exceeds the threshold limit.
        // REQ Only assign signal mass (weight) to those regions that exceed threshold
 * REQ Output a report showing the subregions we have discovered based on signal strength.
 * REQ Output count of runtime subregions found
    // REQ maintain a list of subregions that are over the max limit
// REQ create a function, expressed either in C# or C++, that takes two inputs: two-dimensional array of values, a threshold T
// REQ set upper signal limit for later use to determine regions of interest
    // REQ These values taken from problem assessment dot PDF
// REQ This determines the row width of the int's contained in the hard coded array

 * @return assume Total mass equals the signal "mass" of this region and its neighboor regions.
    // assume that signalStrength is always a positive integer
    // assume creation of a subregion only if the region is not yet part of an existing subregion
 * assume DESC sort on signal mass when listing regions within a subregion
        // assume that if all regions exceeding threshold have equal rMass, then they are equally weighted
    // assume signal threshold Limit is a positive integer

// DESIGN GridRegion defines a region on the grid which contains location and threshold
// DESIGN Demonstrate separation of concerns (encapsulation) via the organization of behavior into the GridStorage, GridRegion, and SubRegion classes
// DESIGN Make use of the C++11 language specification
// DESIGN Performance considerations are taken as a secondary concern in this implementation
// DESIGN Prefer an object oriented implementation verses a straight 'C' style implementation
// DESIGN Screen memory leaks reasonably (track new operator usage), but dont go so far as to implement macros or external tools to verify 100% compliance

        // TESTPLAN Read the row width from the 1st line of the input data file
        // TESTPLAN Read the signal strength limit from the 2nd line of the input data file
// TESTPLAN I am including 3 file based data sets (8x8,10x10,100x100) in addition to the 6x6 original
// TESTPLAN Initially, verify that the results mentioned in the requirements pdf can be duplicated
    // TESTPLAN method processGridFromFile() can be used to drive the logic from an input file
// TESTPLAN Use a data file containing a set of integers, one per row, for the app to process

        // todo: probably should verify that this GridRegion exceeds the signal limit
        // todo: this should probably be an exception thrown
// todo: we may wish to calculate the square root of the number of input lines instead
        return 0; // todo: should probably throw an exception here
#include <algorithm> // todo: I think this is dup
